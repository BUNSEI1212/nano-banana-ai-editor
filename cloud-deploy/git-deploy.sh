#!/bin/bash\n\n# Nano Banana Backend Git部署脚本\n# 使用Git仓库进行自动化部署\n\nset -e  # 遇到错误立即退出\n\n# 配置变量\nREPO_URL=\"https://github.com/BUNSEI1212/nano-banana-ai-editor.git\"\nAPP_NAME=\"nano-banana-backend\"\nAPP_DIR=\"/www/wwwroot/nano-banana\"\nBACKEND_DIR=\"$APP_DIR/backend\"\nLOG_DIR=\"$APP_DIR/logs\"\nDATA_DIR=\"$APP_DIR/data\"\nTEMP_DIR=\"/tmp/nano-banana-deploy\"\n\n# 颜色输出函数\nprint_status() {\n    echo -e \"\\033[1;34m[INFO]\\033[0m $1\"\n}\n\nprint_success() {\n    echo -e \"\\033[1;32m[SUCCESS]\\033[0m $1\"\n}\n\nprint_warning() {\n    echo -e \"\\033[1;33m[WARNING]\\033[0m $1\"\n}\n\nprint_error() {\n    echo -e \"\\033[1;31m[ERROR]\\033[0m $1\"\n}\n\n# 检查是否为root用户\ncheck_root() {\n    if [ \"$EUID\" -ne 0 ]; then\n        print_error \"请使用root用户运行此脚本\"\n        exit 1\n    fi\n}\n\n# 检查Git是否安装\ncheck_git() {\n    print_status \"检查Git环境...\"\n    if ! command -v git &> /dev/null; then\n        print_error \"Git未安装，正在安装...\"\n        if command -v yum &> /dev/null; then\n            yum install -y git\n        elif command -v apt-get &> /dev/null; then\n            apt-get update && apt-get install -y git\n        else\n            print_error \"无法自动安装Git，请手动安装\"\n            exit 1\n        fi\n    fi\n    \n    GIT_VERSION=$(git --version)\n    print_success \"Git版本: $GIT_VERSION\"\n}\n\n# 检查Node.js是否安装\ncheck_nodejs() {\n    print_status \"检查Node.js环境...\"\n    if ! command -v node &> /dev/null; then\n        print_error \"Node.js未安装，请先安装Node.js 18+版本\"\n        exit 1\n    fi\n    \n    NODE_VERSION=$(node --version)\n    print_success \"Node.js版本: $NODE_VERSION\"\n}\n\n# 检查PM2是否安装\ncheck_pm2() {\n    print_status \"检查PM2进程管理器...\"\n    if ! command -v pm2 &> /dev/null; then\n        print_warning \"PM2未安装，正在安装...\"\n        npm install -g pm2\n        print_success \"PM2安装完成\"\n    else\n        print_success \"PM2已安装\"\n    fi\n}\n\n# 停止现有服务\nstop_existing_service() {\n    print_status \"停止现有服务...\"\n    pm2 stop \"$APP_NAME\" 2>/dev/null || true\n    pm2 delete \"$APP_NAME\" 2>/dev/null || true\n    print_success \"现有服务已停止\"\n}\n\n# 备份数据\nbackup_data() {\n    if [ -d \"$DATA_DIR\" ]; then\n        print_status \"备份现有数据...\"\n        BACKUP_DIR=\"$DATA_DIR.backup.$(date +%Y%m%d_%H%M%S)\"\n        cp -r \"$DATA_DIR\" \"$BACKUP_DIR\"\n        print_success \"数据已备份到: $BACKUP_DIR\"\n    fi\n}\n\n# 克隆或更新代码\nclone_or_update_code() {\n    print_status \"获取最新代码...\"\n    \n    # 清理临时目录\n    rm -rf \"$TEMP_DIR\"\n    \n    # 克隆代码到临时目录\n    git clone \"$REPO_URL\" \"$TEMP_DIR\"\n    \n    print_success \"代码获取完成\"\n}\n\n# 创建目录结构\ncreate_directories() {\n    print_status \"创建应用目录结构...\"\n    \n    mkdir -p \"$APP_DIR\"\n    mkdir -p \"$BACKEND_DIR\"\n    mkdir -p \"$LOG_DIR\"\n    mkdir -p \"$DATA_DIR\"\n    \n    print_success \"目录结构创建完成\"\n}\n\n# 复制后端文件\ncopy_backend_files() {\n    print_status \"复制后端文件...\"\n    \n    if [ -d \"$TEMP_DIR/gemini-proxy\" ]; then\n        # 清空现有后端目录（保留数据目录）\n        find \"$BACKEND_DIR\" -mindepth 1 -maxdepth 1 ! -name 'data' -exec rm -rf {} +\n\n        # 复制gemini-proxy文件（包含完整的激活系统）\n        cp -r \"$TEMP_DIR/gemini-proxy/\"* \"$BACKEND_DIR/\"\n        print_success \"Gemini Proxy文件复制完成\"\n    else\n        print_error \"未找到gemini-proxy源码目录\"\n        exit 1\n    fi\n}\n\n# 安装依赖\ninstall_dependencies() {\n    print_status \"安装Node.js依赖...\"\n    \n    cd \"$BACKEND_DIR\"\n    npm install --production\n    \n    print_success \"依赖安装完成\"\n}\n\n# 配置环境变量\nsetup_environment() {\n    print_status \"配置生产环境变量...\"\n    \n    # 复制生产环境配置\n    if [ -f \"$TEMP_DIR/cloud-deploy/.env.production\" ]; then\n        cp \"$TEMP_DIR/cloud-deploy/.env.production\" \"$BACKEND_DIR/.env\"\n        print_success \"环境配置文件已复制\"\n    else\n        print_warning \"未找到生产环境配置文件，使用示例配置\"\n        if [ -f \"$BACKEND_DIR/.env.example\" ]; then\n            cp \"$BACKEND_DIR/.env.example\" \"$BACKEND_DIR/.env\"\n        fi\n    fi\n    \n    # 设置文件权限\n    chmod 600 \"$BACKEND_DIR/.env\"\n}\n\n# 配置PM2\nsetup_pm2() {\n    print_status \"配置PM2进程管理...\"\n    \n    # 复制PM2配置文件\n    if [ -f \"$TEMP_DIR/cloud-deploy/ecosystem.config.js\" ]; then\n        cp \"$TEMP_DIR/cloud-deploy/ecosystem.config.js\" \"$APP_DIR/\"\n        \n        # 更新配置文件中的路径\n        sed -i \"s|/www/wwwroot/nano-banana|$APP_DIR|g\" \"$APP_DIR/ecosystem.config.js\"\n        \n        print_success \"PM2配置完成\"\n    else\n        print_error \"未找到PM2配置文件\"\n        exit 1\n    fi\n}\n\n# 启动服务\nstart_service() {\n    print_status \"启动Nano Banana Backend服务...\"\n    \n    cd \"$APP_DIR\"\n    \n    # 启动新服务\n    pm2 start ecosystem.config.js --env production\n    pm2 save\n    pm2 startup\n    \n    print_success \"服务启动完成\"\n}\n\n# 清理临时文件\ncleanup() {\n    print_status \"清理临时文件...\"\n    rm -rf \"$TEMP_DIR\"\n    print_success \"清理完成\"\n}\n\n# 显示服务状态\nshow_status() {\n    print_status \"服务状态:\"\n    pm2 status\n    \n    echo\n    print_success \"Git部署完成！\"\n    echo\n    echo \"服务信息:\"\n    echo \"  - 应用名称: $APP_NAME\"\n    echo \"  - 运行端口: 3001\"\n    echo \"  - 应用目录: $APP_DIR\"\n    echo \"  - 日志目录: $LOG_DIR\"\n    echo \"  - Git仓库: $REPO_URL\"\n    echo\n    echo \"常用命令:\"\n    echo \"  - 查看状态: pm2 status\"\n    echo \"  - 查看日志: pm2 logs $APP_NAME\"\n    echo \"  - 重启服务: pm2 restart $APP_NAME\"\n    echo \"  - 停止服务: pm2 stop $APP_NAME\"\n    echo \"  - 更新部署: ./git-deploy.sh\"\n    echo\n    print_warning \"请确保防火墙已开放3001端口\"\n}\n\n# 主函数\nmain() {\n    echo \"========================================\"\n    echo \"    Nano Banana Git自动化部署脚本\"\n    echo \"========================================\"\n    echo\n    \n    check_root\n    check_git\n    check_nodejs\n    check_pm2\n    stop_existing_service\n    backup_data\n    clone_or_update_code\n    create_directories\n    copy_backend_files\n    install_dependencies\n    setup_environment\n    setup_pm2\n    start_service\n    cleanup\n    show_status\n}\n\n# 执行主函数\nmain \"$@\"\n"